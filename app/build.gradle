plugins{
    id 'com.android.application'
    id 'com.google.firebase.crashlytics'
    id 'com.google.firebase.firebase-perf'
    id 'androidx.navigation.safeargs'
    id 'com.google.gms.google-services'
    id 'kotlin-android'
    id 'kotlin-kapt'
}

apply from: '../config.gradle'
apply from: '../dependencies.gradle'
apply from: '../signing.gradle'

repositories {
    mavenCentral()
}

kapt {
    correctErrorTypes = true
    mapDiagnosticLocations = true
}

android {
    signingConfigs {
        config {
            keyAlias KEY_ALIAS
            storeFile STORE_FILE
            storePassword STORE_PASS
            keyPassword KEY_PASS
        }
    }

    buildToolsVersion sdk_versions.build_tools

    defaultConfig {
        applicationId APPLICATION_ID
        minSdkVersion sdk_versions.minSdk
        targetSdkVersion sdk_versions.targetSdk
        compileSdkVersion sdk_versions.compileSdk

        versionCode computedVersionCode()
        versionName computedVersionName()

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        vectorDrawables.useSupportLibrary = true
        signingConfig signingConfigs.config
    }
    buildTypes {
        all {
            generatedName(applicationVariants)
        }
        release {
            minifyEnabled false
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
            debuggable true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
    buildFeatures {
        viewBinding true
    }
//    lintOptions {
//        checkReleaseBuilds false
//        // Or, if you prefer, you can continue to check for errors in release builds,
//        // but continue the build even when errors are found:
//        abortOnError false
//    }
}

dependencies {
    implementation project(":core")
    implementation project(":map")
    implementation project(":settings")
    implementation project(":create_location_alarm")
    implementation project(":location_alarm_list")
    implementation project(':location_service')

    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation(libraries.androidx_appcompat)
    implementation(libraries.androidx_legacy_support)
    implementation(libraries.jetbrains_kotlin)

    //UI
    implementation(libraries.androidx_constraintlayout)
    implementation(libraries.androidx_recyclerview)
    implementation(libraries.androidx_cardview)
    implementation(libraries.google_material)

    //KTX
    implementation(libraries.ktx_activity)
    implementation(libraries.ktx_fragment)
    implementation(libraries.ktx_core)
    implementation(libraries.ktx_lifecycle_viewmodel)

    //Navigation
    implementation(libraries.navigation_fragment)
    implementation(libraries.navigation_ui)

    //Multi-threading
    implementation(libraries.coroutines)

    //Di
    implementation(libraries.dagger)
//    implementation(libraries.dagger_android)
//    implementation(libraries.dagger_android_support)
    kapt(libraries.dagger_compiler)
    kapt(libraries.dagger_android_processor)

    //Test
    testImplementation(libraries.junit)
    testImplementation(libraries.mockito)
    testImplementation(libraries.androidx_test_core)
    androidTestImplementation(libraries.androidx_test_ext)
    androidTestImplementation(libraries.androidx_test_runner)
    androidTestImplementation(libraries.androidx_test_espresso)
    androidTestImplementation(libraries.android_test_espresso)
    androidTestImplementation(libraries.androidx_test_ext)
}